{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","TIMER_LABEL_SESSION","SESSION_LENGTH","showTime","minutes","seconds","displaySeconds","audioRef","useRef","intervaleRef","handlerTimeRef","useState","timeMinutes","setTimeMinutes","timeSeconds","setTimeSeconds","timeLeft","setTimeLeft","timerLabel","setTimerlabel","sessionLength","setSessionLength","shortBreak","setShortBreak","isSessionStatus","setIsSessionStatus","isRunning","setIsRunning","useEffect","current","setInterval","clearInterval","play","Container","className","style","minWidth","maxWidth","Row","Col","id","InputGroup","width","Button","disabled","variant","onClick","FormControl","value","onChange","e","currentMinutes","target","parseInt","currentMinutesBreak","pause","currentTime","src","ref","preload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d99cfa7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss';\nimport './main.css';\n\nfunction App() {\n\n  const TIMER_LABEL_SESSION = 'Session';\n  const TIMER_LABEL_BREAK = 'Break';\n  const SESSION_LENGTH = 25;\n  const SHORT_BREAK = 5;\n\n  const showTime = (minutes, seconds) => {\n      const displayMinutes = minutes < 10 ? '0' + minutes : minutes;\n      const displaySeconds = seconds < 10 ? '0' + seconds : seconds;\n      return `${displayMinutes}:${displaySeconds}`;\n  };\n      const audioRef = useRef(null);\n      const intervaleRef = useRef(0);\n      const handlerTimeRef = useRef(null);\n      const [timeMinutes, setTimeMinutes] = useState(SESSION_LENGTH);\n      const [timeSeconds, setTimeSeconds] = useState(0);\n      const [timeLeft, setTimeLeft] = useState(showTime(SESSION_LENGTH, 0));\n      const [timerLabel, setTimerlabel] = useState(TIMER_LABEL_SESSION);\n      const [sessionLength, setSessionLength] = useState(SESSION_LENGTH);\n      const [shortBreak, setShortBreak] = useState(SHORT_BREAK);\n      const [isSessionStatus, setIsSessionStatus] = useState(true);\n      const [isRunning, setIsRunning] = useState(false);\n\n      useEffect(() => {\n\n  \t\tif (isRunning) {\n              intervaleRef.current = setInterval(() => {\n  \t\t\t\thandlerTimeRef.current();\n  \t\t\t}, 1000);\n  \t\t} else {\n  \t\t\tclearInterval(intervaleRef.current);\n  \t\t}\n\n          return () => {\n              clearInterval(intervaleRef.current);\n          };\n      }, [isRunning, timeSeconds]);\n\n      const updateMinutes = () => {\n  \t\t\tsetTimeMinutes(timeMinutes - 1);\n      };\n\n  \tconst handleTime = () => {\n          setTimeLeft(showTime(timeMinutes, timeSeconds));\n  \t\tif (timeMinutes === 0 && timeSeconds === 0) {\n              audioRef.current.play();\n              if(isSessionStatus) {\n                  setTimerlabel(TIMER_LABEL_BREAK);\n                  setTimeMinutes(shortBreak);\n                  setTimeSeconds(1);\n                  setIsSessionStatus(false);\n              }else {\n\n                  setTimerlabel(TIMER_LABEL_SESSION);\n                  setTimeMinutes(sessionLength);\n                  setTimeSeconds(1);\n                  setIsSessionStatus(true);\n              }\n  \t\t} else if ( timeSeconds === 0) {\n              updateMinutes();\n              setTimeSeconds(59);\n          } else {\n              setTimeSeconds(timeSeconds - 1);\n          }\n      };\n      handlerTimeRef.current = handleTime;\n      const reset = () => {\n          setTimeLeft(showTime(SESSION_LENGTH, 0));\n          setTimeMinutes(SESSION_LENGTH);\n          setShortBreak(SHORT_BREAK);\n          setIsRunning(false);\n          setTimerlabel(TIMER_LABEL_SESSION);\n          clearInterval(intervaleRef.current);\n          setSessionLength(SESSION_LENGTH);\n          setIsSessionStatus(true);\n          audioRef.current.pause();\n          audioRef.current.currentTime = 0;\n      };\n  return (\n  <Container className=\"border rounded-lg text-center mt-4\"\n           style={{ minWidth: 300, maxWidth: 700 }}\n       >\n           <h1 className=\"display-12 text-secondary py-4\"> Pomodoro Timer </h1>\n           <Row className=\"justify-content-center\">\n               <Col>\n                   <div id=\"session-label\" className=\"text-secondary pb-1\">\n                       Session Length\n                   </div>\n                   <InputGroup className=\"mx-auto\" style={{width:130}} >\n                       <Button\n                           disabled={isRunning}\n                           variant=\"info\"\n                           id=\"session-decrement\"\n                           onClick={() => {\n                               if (sessionLength > 1 ) {\n                                   setSessionLength(sessionLength - 1);\n                                   setTimeLeft(showTime((sessionLength - 1), 0));\n                                   setTimeMinutes((sessionLength - 1));\n                               }\n                           }}\n                       >\n                           -\n                       </Button>\n                       <FormControl\n                           disabled={isRunning}\n                           id=\"session-length\"\n                           value={sessionLength}\n                           onChange={(e) => {\n                               let currentMinutes =\n                               e.target.value\n                               ? parseInt(e.target.value)\n                               : 1;\n                               setSessionLength(currentMinutes);\n                               setTimeSeconds(0);\n                               setTimeLeft(showTime(currentMinutes, 0));\n                               setTimeMinutes((currentMinutes));\n                           }}\n                           style={{maxWidth:45}}\n                           className=\"mx-2 text-danger\"\n                       >\n                       </FormControl>\n                       <Button\n                           disabled={isRunning}\n                           variant=\"info\"\n                           id=\"session-increment\"\n                           onClick={() => {\n                               if (sessionLength < 60) {\n                                   setSessionLength(sessionLength + 1);\n                                   setTimeLeft(showTime((sessionLength + 1) , 0));\n                               }\n                           }}\n                       >\n                           +\n                       </Button>\n                   </InputGroup>\n\n               </Col>\n               <Col>\n                   <div\n                       id=\"break-label\"\n                       className=\"text-secondary pb-1\"\n                   >Break Length</div>\n                   <InputGroup className=\"mx-auto\" style={{width:130}}>\n                       <Button\n                           disabled={isRunning}\n                           variant=\"info\"\n                           id=\"break-decrement\"\n                           onClick={() => {\n                               setShortBreak(shortBreak > 1 ? shortBreak - 1 : 1);\n                           }}\n                       >-</Button>\n                       <FormControl\n                           disabled={isRunning}\n                           id=\"break-length\"\n                           value={shortBreak}\n                           onChange={(e) => {\n                               let currentMinutesBreak =\n                               e.target.value\n                               ? parseInt(e.target.value)\n                               : 1;\n                               setShortBreak(currentMinutesBreak);\n                           }}\n                           style={{maxWidth:45}}\n                           className=\"mx-2 text-danger\"\n                       />\n                       <Button\n                           disabled={isRunning}\n                           variant=\"info\"\n                           id=\"break-increment\"\n                           onClick={() => {\n                               setShortBreak(\n                                   shortBreak < 60 ? shortBreak + 1 : 60\n                               );\n                           }}\n                       >+</Button>\n                   </InputGroup>\n               </Col>\n           </Row>\n           <Row>\n               <Col className=\"pt-2\">\n                   <div\n                       className=\"border\n                           rounded-pill\n                           my-4\n                           w-50\n                           mx-auto\n                           py-2\n                           shadow-sm\"\n                       >\n                       <div id=\"timer-label\" className=\"pt-3\">\n                           <h4 className=\"text-secondary\">{timerLabel}</h4>\n                       </div>\n                       <div id=\"time-left\" className=\"timer-font text-info\">\n                           {timeLeft}\n                       </div>\n                   </div>\n                   <div className=\"pb-5 pt-3\">\n                       <Button\n                           variant=\"info\"\n                           className=\"mx-4\"\n                           id=\"start_stop\"\n                           onClick={() => {\n                               setIsRunning(!isRunning);\n                           }}\n                       >\n                           {!isRunning ? 'Start' : 'Stop'}\n                       </Button>\n                       <Button\n                           variant=\"info\"\n                           className=\"mx-4\"\n                           id=\"reset\"\n                           onClick={() => {\n                               reset();\n                           }}\n                       >\n                           Reset\n                       </Button>\n                   </div>\n               </Col>\n           </Row>\n           <audio\n               id=\"beep\"\n               src=\"https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3\"\n               ref={audioRef}\n               preload=\"auto\"\n           />\n       </Container>\n   );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}